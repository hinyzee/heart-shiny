[{"name": "app.py", "content": "from shiny import App, render, ui, reactive\nfrom shinyswatch import theme\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport requests\nimport matplotlib.pyplot as plt\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nfrom sklearn.metrics import (\n    make_scorer,\n    accuracy_score,\n    confusion_matrix,\n    precision_score,\n    recall_score,\n    f1_score,\n    roc_curve,\n    roc_auc_score,\n    classification_report\n)\nimport pickle\n\n# read in pickle file from github\nurl_1 = 'https://raw.githubusercontent.com/hinyzee/heart-shiny/main/models/best_model.pkl'\nresponse = requests.get(url_1)\nbest_model = pickle.loads(response.content)\n\nurl_2 = 'https://raw.githubusercontent.com/hinyzee/heart-shiny/main/models/preprocessor.pkl'\nresponse = requests.get(url_2)\npreprocessor = pickle.loads(response.content)\n\nurl_3 = 'https://raw.githubusercontent.com/hinyzee/heart-shiny/main/models/scaler.pkl'\nresponse = requests.get(url_3)\nstandard_scaler = pickle.loads(response.content)\n\n\n\n# Load the model\n# model_path = \"../models/best_model.pkl\"\n# with open(model_path, 'rb') as file:\n#     best_model = pickle.load(file)\n\n# with open('../models/preprocessor.pkl', 'rb') as file:\n#     preprocessor = pickle.load(file)\n\n# with open('../models/scaler.pkl', 'rb') as file:\n#     standard_scaler = pickle.load(file)\n\n# Define the pipeline\npipeline = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('scaler', standard_scaler),\n    ('model', best_model)\n])\n\n# Create a dictionary of unique values for selection inputs\nunique_values = {\n    'State': ['Alabama','Alaska','Arizona','Arkansas','California','Colorado',\n              'Connecticut','Delaware','District of Columbia','Florida','Georgia',\n              'Guam','Hawaii','Idaho', 'Illinois','Indiana','Iowa', 'Kansas', 'Kentucky',\n               'Louisiana','Maine','Maryland','Massachusetts', 'Michigan',\n               'Minnesota', 'Mississippi', 'Missouri', 'Montana','Nebraska', \n               'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York',\n                'North Carolina','North Dakota', 'Ohio', 'Oklahoma', 'Oregon',\n                'Pennsylvania','Puerto Rico','Rhode Island', 'South Carolina',\n                'South Dakota', 'Tennessee','Texas', 'Utah', 'Vermont',\n                'Virgin Islands','Virginia','Washington','West Virginia',\n                'Wisconsin','Wyoming'],\n    'Sex': ['Female', 'Male'],\n    'AgeCategory': [ 'Age 18 to 24', 'Age 25 to 29', 'Age 30 to 34', \n                    'Age 35 to 39', 'Age 40 to 44', 'Age 45 to 49', \n                    'Age 50 to 54', 'Age 55 to 59', 'Age 60 to 64', \n                    'Age 65 to 69', 'Age 70 to 74', 'Age 75 to 79', \n                    'Age 80 or older'],\n    'LastCheckupTime': [\"Within past year (anytime less than 12 months ago)\", \n                        \"Within past 2 years (1 year but less than 2 years ago)\", \n                        \"Within past 5 years (2 years but less than 5 years ago)\", \n                        \"5 or more years ago\"],\n    'PhysicalActivities': ['No', 'Yes'],\n    'RemovedTeeth': ['None of them', '1 to 5', '6 or more, but not all', 'All'],\n    'GeneralHealth': ['Poor', 'Fair', 'Good', 'Very good', 'Excellent'],\n    'SmokerStatus': [\"Never smoked\", \"Former smoker\", \n                     \"Current smoker - now smokes some days\", \n                     \"Current smoker - now smokes every day\"],\n    'HIVTesting': ['No', 'Yes'],\n    'FluVaxLast12': ['No', 'Yes'],\n    'PneumoVaxEver': ['No', 'Yes'],\n    'TetanusLast10Tdap': [ \"No, did not receive any tetanus shot in the past 10 years\", \n                          \"Yes, received tetanus shot but not sure what type\", \n                          \"Yes, received Tdap in the past 10 years\"],\n    'HighRiskLastYear': ['No', 'Yes'],\n    'CovidPos': ['No', 'Yes', \n                 'Tested positive using home test without a health professional'],\n    'HadAsthma': ['No', 'Yes'],\n    'HadSkinCancer': ['No', 'Yes'],\n    'HadCOPD': ['No', 'Yes'],\n    'HadDepressiveDisorder': ['No', 'Yes'],\n    'HadKidneyDisease': ['No', 'Yes'],\n    'HadArthritis': ['No', 'Yes'],\n    'HadDiabetes': ['Yes', 'No', \n                    'No, pre-diabetes or borderline diabetes', \n                    'Yes, but only during pregnancy (female)'],\n    'DeafOrHardOfHearing': ['No', 'Yes'],\n    'BlindOrVisionDifficulty': ['No', 'Yes'],\n    'DifficultyConcentrating': ['No', 'Yes'],\n    'DifficultyWalking': ['No', 'Yes'],\n    'DifficultyDressingBathing': ['No', 'Yes'],\n    'DifficultyErrands': ['No', 'Yes'],\n    'ChestScan': ['No', 'Yes'],\n    'RaceEthnicityCategory': ['White only, Non-Hispanic', \n                              'Black only, Non-Hispanic',\n                              'Other race only, Non-Hispanic', \n                              'Multiracial, Non-Hispanic',\n                              'Hispanic'],\n    'AlcoholDrinkers': ['No', 'Yes'],\n    'ECigaretteUsage': ['Never used e-cigarettes in my entire life',\n                            'Not at all (right now)',\n                            'Use them some days',\n                            'Use them every day']\n}\n\n# UI section starts from here \napp_ui = ui.page_fluid(\n    theme.flatly(),\n    ui.markdown(\n        \"\"\"\n        ## Heart Disease Prediction Model\n        \"\"\"\n    ),\n    ui.layout_sidebar(\n        ui.panel_sidebar(\n            ui.input_select(\"State\", \"Which state do you live in?\", \n                            {i: state for i, state in enumerate(unique_values['State'])}),\n            ui.input_select(\"Sex\", \"Sex\", {i: sex for i, sex in enumerate(unique_values['Sex'])}),\n            ui.input_select(\"AgeCategory\", \"Age Group\", \n                            {i: age for i, age in enumerate(unique_values['AgeCategory'])}),\n            ui.input_numeric(\"PhysicalHealthDays\", \"Physical Health Days\", value=0),\n            ui.input_numeric(\"MentalHealthDays\", \"Mental Health Days\", value=0),\n            ui.input_select(\"LastCheckupTime\", \"When was your checkup?\", \n                            {i: checkup for i, checkup in enumerate(unique_values['LastCheckupTime'])}),\n            ui.input_select(\"PhysicalActivities\", \"Physical Activities\", \n                            {i: activity for i, activity in enumerate(unique_values['PhysicalActivities'])}),\n            ui.input_numeric(\"SleepHours\", \"Sleep Hours\", value=0),\n            ui.input_select(\"RemovedTeeth\", \"Have you had any teeth removed?\", \n                            {i: teeth for i, teeth in enumerate(unique_values['RemovedTeeth'])}),\n            ui.input_select(\"GeneralHealth\", \"General Health\", \n                            {i: health for i, health in enumerate(unique_values['GeneralHealth'])}),\n            ui.input_numeric(\"HeightInMeters\", \"Height (in meters)\", value=0),\n            ui.input_numeric(\"WeightInKilograms\", \"Weight (in kilograms)\", value=0),\n            ui.input_select(\"SmokerStatus\", \"Smoking Status\", \n                            {i: smoker for i, smoker in enumerate(unique_values['SmokerStatus'])}),\n            ui.input_select(\"HIVTesting\", \"HIV Testing\", \n                            {i: hiv for i, hiv in enumerate(unique_values['HIVTesting'])}),\n            ui.input_select(\"FluVaxLast12\", \"Flu Vax Last 12 Months\", \n                            {i: flu for i, flu in enumerate(unique_values['FluVaxLast12'])}),\n            ui.input_select(\"PneumoVaxEver\", \"Pneumo Vax Ever\", \n                            {i: pneumo for i, pneumo in enumerate(unique_values['PneumoVaxEver'])}),\n            ui.input_select(\"TetanusLast10Tdap\", \"Tetanus Last 10 Years Tdap\", \n                            {i: tetanus for i, tetanus in enumerate(unique_values['TetanusLast10Tdap'])}),\n            ui.input_select(\"HighRiskLastYear\", \"High Risk Last Year\", \n                            {i: risk for i, risk in enumerate(unique_values['HighRiskLastYear'])}),\n            ui.input_select(\"CovidPos\", \"Covid Positive\", \n                            {i: covid for i, covid in enumerate(unique_values['CovidPos'])}),\n            ui.input_select(\"HadAsthma\", \"Had Asthma\", \n                            {i: asthma for i, asthma in enumerate(unique_values['HadAsthma'])}),\n            ui.input_select(\"HadSkinCancer\", \"Had Skin Cancer\", \n                            {i: cancer for i, cancer in enumerate(unique_values['HadSkinCancer'])}),\n            ui.input_select(\"HadCOPD\", \"Had COPD\", \n                            {i: copd for i, copd in enumerate(unique_values['HadCOPD'])}),\n            ui.input_select(\"HadDepressiveDisorder\", \"Had Depressive Disorder\", \n                            {i: depressive for i, depressive in enumerate(unique_values['HadDepressiveDisorder'])}),\n            ui.input_select(\"HadKidneyDisease\", \"Had Kidney Disease\", \n                            {i: kidney for i, kidney in enumerate(unique_values['HadKidneyDisease'])}),\n            ui.input_select(\"HadArthritis\", \"Had Arthritis\", \n                            {i: arthritis for i, arthritis in enumerate(unique_values['HadArthritis'])}),\n            ui.input_select(\"HadDiabetes\", \"Had Diabetes\", \n                            {i: diabetes for i, diabetes in enumerate(unique_values['HadDiabetes'])}),\n            ui.input_select(\"DeafOrHardOfHearing\", \"Deaf or Hard of Hearing\", \n                            {i: deaf for i, deaf in enumerate(unique_values['DeafOrHardOfHearing'])}),\n            ui.input_select(\"BlindOrVisionDifficulty\", \"Blind or Vision Difficulty\", \n                            {i: blind for i, blind in enumerate(unique_values['BlindOrVisionDifficulty'])}),\n            ui.input_select(\"DifficultyConcentrating\", \"Difficulty Concentrating\", \n                            {i: concentrate for i, concentrate in enumerate(unique_values['DifficultyConcentrating'])}),\n            ui.input_select(\"DifficultyWalking\", \"Difficulty Walking\", \n                            {i: walk for i, walk in enumerate(unique_values['DifficultyWalking'])}),\n            ui.input_select(\"DifficultyDressingBathing\", \"Difficulty Dressing or Bathing\", \n                            {i: dress for i, dress in enumerate(unique_values['DifficultyDressingBathing'])}),\n            ui.input_select(\"DifficultyErrands\", \"Difficulty Running Errands\", \n                            {i: errand for i, errand in enumerate(unique_values['DifficultyErrands'])}),\n            ui.input_select(\"ChestScan\", \"Have you ever had a chest scan?\", \n                            {i: scan for i, scan in enumerate(unique_values['ChestScan'])}),\n            ui.input_select(\"RaceEthnicityCategory\", \"Race/Ethnicity Category\", \n                            {i: race for i, race in enumerate(unique_values['RaceEthnicityCategory'])}),\n            ui.input_select(\"AlcoholDrinkers\", \"Alcohol Drinkers\", \n                            {i: alcohol for i, alcohol in enumerate(unique_values['AlcoholDrinkers'])}),\n            ui.input_select(\"ECigaretteUsage\", \"E-Cigarette Usage\",\n                            {i: ecig for i, ecig in enumerate(unique_values['ECigaretteUsage'])}),\n            ui.input_action_button(\"btn\", \"Predict\"),\n\n        ),\n        ui.panel_main(\n            ui.markdown(\n                \"\"\"\n                ### Heart Disease Risk Score (0 - 100)\n                \"\"\"\n            ),\n            ui.output_text_verbatim(\"txt\", placeholder=\"Risk Score\"),\n            ui.output_plot(\"risk_score_plot\", height=\"30%\", width=\"100%\")\n\n        )\n    )\n)\n\ndef server(input, output, session):\n    @output\n    @render.text\n    @reactive.event(input.btn)\n    def txt():\n        # Collect input data\n        input_data = pd.DataFrame([{\n            'State': unique_values['State'][unique_values['State'] == input.State()],\n            'Sex': unique_values['Sex'][unique_values['Sex'] == input.Sex()],\n            'AgeCategory': unique_values['AgeCategory'][unique_values['AgeCategory'] == input.AgeCategory()],\n            'PhysicalHealthDays': input.PhysicalHealthDays(),\n            'MentalHealthDays': input.MentalHealthDays(),\n            'LastCheckupTime': unique_values['LastCheckupTime'][unique_values['LastCheckupTime'] == input.LastCheckupTime()],\n            'PhysicalActivities': unique_values['PhysicalActivities'][unique_values['PhysicalActivities'] == input.PhysicalActivities()],\n            'SleepHours': input.SleepHours(),\n            'RemovedTeeth': unique_values['RemovedTeeth'][unique_values['RemovedTeeth'] == input.RemovedTeeth()],\n            'GeneralHealth': unique_values['GeneralHealth'][unique_values['GeneralHealth'] == input.GeneralHealth()],\n            'HeightInMeters': input.HeightInMeters(),\n            'WeightInKilograms': input.WeightInKilograms(),\n            'SmokerStatus': unique_values['SmokerStatus'][unique_values['SmokerStatus'] == input.SmokerStatus()],\n            'HIVTesting': unique_values['HIVTesting'][unique_values['HIVTesting'] == input.HIVTesting()],\n            'FluVaxLast12': unique_values['FluVaxLast12'][unique_values['FluVaxLast12'] == input.FluVaxLast12()],\n            'PneumoVaxEver': unique_values['PneumoVaxEver'][unique_values['PneumoVaxEver'] == input.PneumoVaxEver()],\n            'TetanusLast10Tdap': unique_values['TetanusLast10Tdap'][unique_values['TetanusLast10Tdap'] == input.TetanusLast10Tdap()],\n            'HighRiskLastYear': unique_values['HighRiskLastYear'][unique_values['HighRiskLastYear'] == input.HighRiskLastYear()],\n            'CovidPos': unique_values['CovidPos'][unique_values['CovidPos'] == input.CovidPos()],\n            'HadAsthma': unique_values['HadAsthma'][unique_values['HadAsthma'] == input.HadAsthma()],\n            'HadSkinCancer': unique_values['HadSkinCancer'][unique_values['HadSkinCancer'] == input.HadSkinCancer()],   \n            'HadCOPD': unique_values['HadCOPD'][unique_values['HadCOPD'] == input.HadCOPD()],\n            'HadDepressiveDisorder': unique_values['HadDepressiveDisorder'][unique_values['HadDepressiveDisorder'] == input.HadDepressiveDisorder()],   \n            'HadKidneyDisease': unique_values['HadKidneyDisease'][unique_values['HadKidneyDisease'] == input.HadKidneyDisease()],\n            'HadArthritis': unique_values['HadArthritis'][unique_values['HadArthritis'] == input.HadArthritis()],\n            'HadDiabetes': unique_values['HadDiabetes'][unique_values['HadDiabetes'] == input.HadDiabetes()],\n            'DeafOrHardOfHearing': unique_values['DeafOrHardOfHearing'][unique_values['DeafOrHardOfHearing'] == input.DeafOrHardOfHearing()],   \n            'BlindOrVisionDifficulty': unique_values['BlindOrVisionDifficulty'][unique_values['BlindOrVisionDifficulty'] == input.BlindOrVisionDifficulty()],   \n            'DifficultyConcentrating': unique_values['DifficultyConcentrating'][unique_values['DifficultyConcentrating'] == input.DifficultyConcentrating()],   \n            'DifficultyWalking': unique_values['DifficultyWalking'][unique_values['DifficultyWalking'] == input.DifficultyWalking()],   \n            'DifficultyDressingBathing': unique_values['DifficultyDressingBathing'][unique_values['DifficultyDressingBathing'] == input.DifficultyDressingBathing()],   \n            'DifficultyErrands': unique_values['DifficultyErrands'][unique_values['DifficultyErrands'] == input.DifficultyErrands()],   \n            'ChestScan': unique_values['ChestScan'][unique_values['ChestScan'] == input.ChestScan()],\n            'RaceEthnicityCategory': unique_values['RaceEthnicityCategory'][unique_values['RaceEthnicityCategory'] == input.RaceEthnicityCategory()],\n            'ECigaretteUsage': unique_values['ECigaretteUsage'][unique_values['ECigaretteUsage'] == input.ECigaretteUsage()],\n            'AlcoholDrinkers': unique_values['AlcoholDrinkers'][unique_values['AlcoholDrinkers'] == input.AlcoholDrinkers()],\n            'BMI': input.WeightInKilograms() / (input.HeightInMeters() ** 2)\n        }])\n\n        prediction = pipeline.predict_proba(input_data)[0][1] * 100\n        return f\"Your risk score for CVD is {prediction:.2f}\"\n    \n    # Plot the distribution of the probability of having a heart disease\n    # Generate a random sample of 1000 predictions\n    @output\n    @render.plot(height=500, width=600)\n    @reactive.event(input.btn)\n    def risk_score_plot():\n        # make the prediction\n        input_data = pd.DataFrame([{\n            'State': unique_values['State'][unique_values['State'] == input.State()],\n            'Sex': unique_values['Sex'][unique_values['Sex'] == input.Sex()],\n            'AgeCategory': unique_values['AgeCategory'][unique_values['AgeCategory'] == input.AgeCategory()],\n            'PhysicalHealthDays': input.PhysicalHealthDays(),\n            'MentalHealthDays': input.MentalHealthDays(),\n            'LastCheckupTime': unique_values['LastCheckupTime'][unique_values['LastCheckupTime'] == input.LastCheckupTime()],\n            'PhysicalActivities': unique_values['PhysicalActivities'][unique_values['PhysicalActivities'] == input.PhysicalActivities()],\n            'SleepHours': input.SleepHours(),\n            'RemovedTeeth': unique_values['RemovedTeeth'][unique_values['RemovedTeeth'] == input.RemovedTeeth()],\n            'GeneralHealth': unique_values['GeneralHealth'][unique_values['GeneralHealth'] == input.GeneralHealth()],\n            'HeightInMeters': input.HeightInMeters(),\n            'WeightInKilograms': input.WeightInKilograms(),\n            'SmokerStatus': unique_values['SmokerStatus'][unique_values['SmokerStatus'] == input.SmokerStatus()],\n            'HIVTesting': unique_values['HIVTesting'][unique_values['HIVTesting'] == input.HIVTesting()],\n            'FluVaxLast12': unique_values['FluVaxLast12'][unique_values['FluVaxLast12'] == input.FluVaxLast12()],\n            'PneumoVaxEver': unique_values['PneumoVaxEver'][unique_values['PneumoVaxEver'] == input.PneumoVaxEver()],\n            'TetanusLast10Tdap': unique_values['TetanusLast10Tdap'][unique_values['TetanusLast10Tdap'] == input.TetanusLast10Tdap()],\n            'HighRiskLastYear': unique_values['HighRiskLastYear'][unique_values['HighRiskLastYear'] == input.HighRiskLastYear()],\n            'CovidPos': unique_values['CovidPos'][unique_values['CovidPos'] == input.CovidPos()],\n            'HadAsthma': unique_values['HadAsthma'][unique_values['HadAsthma'] == input.HadAsthma()],\n            'HadSkinCancer': unique_values['HadSkinCancer'][unique_values['HadSkinCancer'] == input.HadSkinCancer()],   \n            'HadCOPD': unique_values['HadCOPD'][unique_values['HadCOPD'] == input.HadCOPD()],\n            'HadDepressiveDisorder': unique_values['HadDepressiveDisorder'][unique_values['HadDepressiveDisorder'] == input.HadDepressiveDisorder()],   \n            'HadKidneyDisease': unique_values['HadKidneyDisease'][unique_values['HadKidneyDisease'] == input.HadKidneyDisease()],\n            'HadArthritis': unique_values['HadArthritis'][unique_values['HadArthritis'] == input.HadArthritis()],\n            'HadDiabetes': unique_values['HadDiabetes'][unique_values['HadDiabetes'] == input.HadDiabetes()],\n            'DeafOrHardOfHearing': unique_values['DeafOrHardOfHearing'][unique_values['DeafOrHardOfHearing'] == input.DeafOrHardOfHearing()],   \n            'BlindOrVisionDifficulty': unique_values['BlindOrVisionDifficulty'][unique_values['BlindOrVisionDifficulty'] == input.BlindOrVisionDifficulty()],   \n            'DifficultyConcentrating': unique_values['DifficultyConcentrating'][unique_values['DifficultyConcentrating'] == input.DifficultyConcentrating()],   \n            'DifficultyWalking': unique_values['DifficultyWalking'][unique_values['DifficultyWalking'] == input.DifficultyWalking()],   \n            'DifficultyDressingBathing': unique_values['DifficultyDressingBathing'][unique_values['DifficultyDressingBathing'] == input.DifficultyDressingBathing()],   \n            'DifficultyErrands': unique_values['DifficultyErrands'][unique_values['DifficultyErrands'] == input.DifficultyErrands()],   \n            'ChestScan': unique_values['ChestScan'][unique_values['ChestScan'] == input.ChestScan()],\n            'RaceEthnicityCategory': unique_values['RaceEthnicityCategory'][unique_values['RaceEthnicityCategory'] == input.RaceEthnicityCategory()],\n            'ECigaretteUsage': unique_values['ECigaretteUsage'][unique_values['ECigaretteUsage'] == input.ECigaretteUsage()],\n            'AlcoholDrinkers': unique_values['AlcoholDrinkers'][unique_values['AlcoholDrinkers'] == input.AlcoholDrinkers()],\n            'BMI': input.WeightInKilograms() / (input.HeightInMeters() ** 2)\n        }])\n        prediction = pipeline.predict_proba(input_data)[0][1] * 100\n        # similate 1000 predictions that skew to the left with min 0 and max 100\n        risk_scores = np.random.beta(2, 5, 1000) * 100\n        plt.figure(figsize=(5, 5))\n        sns.histplot(risk_scores, kde=True, color = \"gray\")\n        # Add a vertical line to indicate the user's risk score\n        plt.axvline(prediction, color='red', linestyle='--', label='Your Risk Score')\n        plt.xlabel('Risk Score')\n        plt.ylabel('Probability Density')\n        # hide y ticks\n        plt.yticks([])\n        plt.suptitle('Distribution of Heart Disease Risk Scores among the population')\n        plt.title('The red dashed line indicates your risk score for heart disease')\n        return plt.gcf()                                \n    \napp = App(app_ui, server)\n", "type": "text"}, {"name": "Untitled-1.ipynb", "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 2,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"3.11.6 | packaged by conda-forge | (main, Oct  3 2023, 10:40:37) [Clang 15.0.7 ]\\n\",\n      \"1.26.4\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import numpy as np\\n\",\n    \"# check version\\n\",\n    \"import sys\\n\",\n    \"print(sys.version)\\n\",\n    \"print(np.__version__)\\n\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 4,\n   \"metadata\": {},\n   \"outputs\": [\n    {\n     \"ename\": \"FileNotFoundError\",\n     \"evalue\": \"[Errno 2] No such file or directory: '../models/best_model.pkl'\",\n     \"output_type\": \"error\",\n     \"traceback\": [\n      \"\\u001b[0;31m---------------------------------------------------------------------------\\u001b[0m\",\n      \"\\u001b[0;31mFileNotFoundError\\u001b[0m                         Traceback (most recent call last)\",\n      \"Cell \\u001b[0;32mIn[4], line 2\\u001b[0m\\n\\u001b[1;32m      1\\u001b[0m \\u001b[38;5;28;01mimport\\u001b[39;00m \\u001b[38;5;21;01mpickle\\u001b[39;00m \\n\\u001b[0;32m----> 2\\u001b[0m \\u001b[38;5;28;01mwith\\u001b[39;00m \\u001b[38;5;28;43mopen\\u001b[39;49m\\u001b[43m(\\u001b[49m\\u001b[38;5;124;43m\\\"\\u001b[39;49m\\u001b[38;5;124;43m../models/best_model.pkl\\u001b[39;49m\\u001b[38;5;124;43m\\\"\\u001b[39;49m\\u001b[43m,\\u001b[49m\\u001b[43m \\u001b[49m\\u001b[38;5;124;43m'\\u001b[39;49m\\u001b[38;5;124;43mrb\\u001b[39;49m\\u001b[38;5;124;43m'\\u001b[39;49m\\u001b[43m)\\u001b[49m \\u001b[38;5;28;01mas\\u001b[39;00m file:\\n\\u001b[1;32m      3\\u001b[0m     best_model \\u001b[38;5;241m=\\u001b[39m pickle\\u001b[38;5;241m.\\u001b[39mload(file)\\n\\u001b[1;32m      5\\u001b[0m \\u001b[38;5;28;01mwith\\u001b[39;00m \\u001b[38;5;28mopen\\u001b[39m(\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m../models/preprocessor.pkl\\u001b[39m\\u001b[38;5;124m'\\u001b[39m, \\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124mrb\\u001b[39m\\u001b[38;5;124m'\\u001b[39m) \\u001b[38;5;28;01mas\\u001b[39;00m file:\\n\",\n      \"File \\u001b[0;32m~/Downloads/anaconda3/envs/BIOSTAT203C-24S/lib/python3.11/site-packages/IPython/core/interactiveshell.py:310\\u001b[0m, in \\u001b[0;36m_modified_open\\u001b[0;34m(file, *args, **kwargs)\\u001b[0m\\n\\u001b[1;32m    303\\u001b[0m \\u001b[38;5;28;01mif\\u001b[39;00m file \\u001b[38;5;129;01min\\u001b[39;00m {\\u001b[38;5;241m0\\u001b[39m, \\u001b[38;5;241m1\\u001b[39m, \\u001b[38;5;241m2\\u001b[39m}:\\n\\u001b[1;32m    304\\u001b[0m     \\u001b[38;5;28;01mraise\\u001b[39;00m \\u001b[38;5;167;01mValueError\\u001b[39;00m(\\n\\u001b[1;32m    305\\u001b[0m         \\u001b[38;5;124mf\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mIPython won\\u001b[39m\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124mt let you open fd=\\u001b[39m\\u001b[38;5;132;01m{\\u001b[39;00mfile\\u001b[38;5;132;01m}\\u001b[39;00m\\u001b[38;5;124m by default \\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\n\\u001b[1;32m    306\\u001b[0m         \\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124mas it is likely to crash IPython. If you know what you are doing, \\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\n\\u001b[1;32m    307\\u001b[0m         \\u001b[38;5;124m\\\"\\u001b[39m\\u001b[38;5;124myou can use builtins\\u001b[39m\\u001b[38;5;124m'\\u001b[39m\\u001b[38;5;124m open.\\u001b[39m\\u001b[38;5;124m\\\"\\u001b[39m\\n\\u001b[1;32m    308\\u001b[0m     )\\n\\u001b[0;32m--> 310\\u001b[0m \\u001b[38;5;28;01mreturn\\u001b[39;00m \\u001b[43mio_open\\u001b[49m\\u001b[43m(\\u001b[49m\\u001b[43mfile\\u001b[49m\\u001b[43m,\\u001b[49m\\u001b[43m \\u001b[49m\\u001b[38;5;241;43m*\\u001b[39;49m\\u001b[43margs\\u001b[49m\\u001b[43m,\\u001b[49m\\u001b[43m \\u001b[49m\\u001b[38;5;241;43m*\\u001b[39;49m\\u001b[38;5;241;43m*\\u001b[39;49m\\u001b[43mkwargs\\u001b[49m\\u001b[43m)\\u001b[49m\\n\",\n      \"\\u001b[0;31mFileNotFoundError\\u001b[0m: [Errno 2] No such file or directory: '../models/best_model.pkl'\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import pickle \\n\",\n    \"with open(\\\"../models/best_model.pkl\\\", 'rb') as file:\\n\",\n    \"    best_model = pickle.load(file)\\n\",\n    \"\\n\",\n    \"with open('../models/preprocessor.pkl', 'rb') as file:\\n\",\n    \"    preprocessor = pickle.load(file)\\n\",\n    \"\\n\",\n    \"with open('../models/standard_scaler.pkl', 'rb') as file:\\n\",\n    \"    standard_scaler = pickle.load(file)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"shinyenv\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.6\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n", "type": "text"}, {"name": "output.png", "content": "", "type": "binary"}]